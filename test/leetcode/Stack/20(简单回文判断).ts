/*
 * @lc app=leetcode.cn id=20 lang=typescript
 *
 * [20] 有效的括号
 */

// @lc code=start
function isValid(s: string): boolean {
    let len = s.length;
    if (len === 1) return false;

    const isMatch = (s1, s2) => {
        if (s1 === '(' && s2 === ")") return true;
        if (s1 === '{' && s2 === "}") return true;
        if (s1 === '[' && s2 === "]") return true;
        return false;
    }
    
    const stack = [];
    for (let i = 0; i < len; i++){
        const top = stack[stack.length - 1];
        if (isMatch(top,s[i])) {
            stack.pop();
        } else {
            stack.push(s[i])
        }
    }

    return stack.length === 0;
};


// @lc code=end

// 给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串 s ，判断字符串是否有效。

// 有效字符串需满足：
// 左括号必须用相同类型的右括号闭合。
// 左括号必须以正确的顺序闭合。

// 示例 1：

// 输入：s = "()"
// 输出：true
// 示例 2：

// 输入：s = "()[]{}"
// 输出：true
// 示例 3：

// 输入：s = "(]"
// 输出：false
// 示例 4：

// 输入：s = "([)]"
// 输出：false
// 示例 5：

// 输入：s = "{[]}"
// 输出：true
 

// 提示：

// 1 <= s.length <= 104
// s 仅由括号 '()[]{}' 组成

// 71:简化路径，简单题114：二叉树展开为链表，变形：426：将BST 转为排序的双向链表143：重排链表：似乎与栈无关，用链表本身的操作更简单表达式求值：特点是需要分段，但没有层次结构150： 逆波兰表达式求值，770：基本计算器IV，772：基本计算器III224：基本计算器，227：基本计算器II，1106：解析布尔表达式439：三元表达式解析器，726：原子数量，736：Lisp语法解析，1628：设计带解析函数的表达式树880：索引处的解码字符串，1006：笨阶乘：栈的简单应用255：验证前序遍历序列二叉搜索树：简单题，331：简单题316：去除重复字母：简单题，与1081重复内部有层次结构，做循环解析341：扁平化嵌套列表迭代器：好题364：加权嵌套序列和II：好题385：迷你语法分析器，591.标签验证器，1096.花括号展开II856.括号的分数，1190.反转每对括号间的子串388.文件的最长绝对路径：中等题，如果做出来，两遍就够了394.字符串解码：这道题难度在编码402.移掉k位数字：单调栈的应用445.两数相加II：没有想到最优解，是个好题456.132模式，简单题484.寻找排列，简单题503.下一个更大的元素II581.最短无序连续子数组636.函数独占时间：跟栈关系不大，不过挺有意思654：递归题目，跟栈关系不是很大，不知道最优解678.有效的括号字符串：错题，好题，自己想答案，仔细总结，先把思路想出来，写在纸上，好好总结735.行星碰撞：典型的用栈解决的问题，比较简单739.每日温度：单调栈，不过需要一点思考769.最多能完成排序的块：没读懂题意，768.最多能完成的排序的块II901.股票价格的跨度：最优解？907.子数组的最小值之和：最优解比较费劲921.使括号有效的最少添加：简单题，栈的简单应用946.验证栈的序列：主要考察代码功底，先把思路搞顺了再下笔962.最大宽度坡：单调栈的应用，简单题1003.检查替换后的词是否有效：没有思路1008.前序遍历构造二叉搜索树：简单题，要注意代码的优雅简洁1019.链表中的下一个更大节点：没想到最优解，要按照系统方法怎样想到最优解，自己抠出来1081.不同字符的最小子序列：简单题，注意语言snippt1111.有效括号的嵌套深度：没有明确思路1124.表现良好的最长时间段：简单题1130.叶值的最小代价生成树：没有思路1209.删除字符中的所有相邻重复项II:没有最优解思路1214.查找两棵二叉搜索树之和：二叉搜索，可能不是最优解1249.移除无效的括号：简单题1265.逆序打印不可变链表：最优解没做出来，空间O(1)1381.设计一个支持增量操作的栈1472.设计浏览器历史记录：简单题1504.统计全1子矩阵：似乎是动态规划？1541.平衡括号字符串的最小插入次数：似乎是动态规划？1574.删除最短的子数组：没有思路1586.二叉搜索树迭代器II：对于最优解没有把握1653.使字符串平衡的最少删除次数：动态规划？1673.找出最具竞争力的子序列：单调栈1756.设计最近使用队列（MFU）1717.删除子字符串的最大得分：动态规划？1762.能看到海景的建筑物：单调栈1856.子数组最小乘积的最大值：动态规划？1963.使字符串平衡的最小交换次数：动态规划？栈？1996.游戏中弱角色的数量：单调栈？面试03.03：堆盘子面试03.05 栈排序：单调栈